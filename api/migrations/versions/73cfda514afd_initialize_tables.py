"""initialize tables

Revision ID: 73cfda514afd
Revises: 
Create Date: 2025-09-30 17:21:59.874940

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '73cfda514afd'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('preferred_name', sa.String(length=128), nullable=True),
    sa.Column('email', postgresql.CITEXT(), nullable=True),
    sa.Column('terms_accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_guest', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(is_guest = false) OR (expires_at IS NOT NULL)', name='ck_users_guest_requires_expires_at'),
    sa.CheckConstraint('length(email) <= 320', name='ck_users_email_length'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('preferred_name')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_expires_at'), 'users', ['expires_at'], unique=False)
    op.create_index('ix_users_expiring_guests_active', 'users', ['expires_at'], unique=False, postgresql_where=sa.text('is_guest = true'))
    op.create_index(op.f('ix_users_is_guest'), 'users', ['is_guest'], unique=False)
    op.create_index(op.f('ix_users_public_id'), 'users', ['public_id'], unique=True)
    op.create_index('uq_users_email_lower', 'users', [sa.literal_column('lower(email)')], unique=True, postgresql_where=sa.text('email IS NOT NULL'))
    op.create_index('uq_users_name_lower', 'users', [sa.literal_column('lower(name)')], unique=False, postgresql_where=sa.text('name IS NOT NULL'))
    op.create_table('identities',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('provider', 'subject', name='uq_identities_provider_subject')
    )
    op.create_index(op.f('ix_identities_user_id'), 'identities', ['user_id'], unique=False)
    op.create_table('rooms',
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('is_public', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('kind', postgresql.ENUM('guest', 'normal', name='room_kind'), server_default=sa.text("'normal'"), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(kind <> 'guest') OR (expires_at IS NOT NULL)", name='ck_rooms_guest_requires_expires_at'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='uq_rooms_owner_name')
    )
    op.create_index(op.f('ix_rooms_expires_at'), 'rooms', ['expires_at'], unique=False)
    op.create_index('ix_rooms_expiring_active', 'rooms', ['expires_at'], unique=False, postgresql_where=sa.text("kind = 'guest'"))
    op.create_index('ix_rooms_is_public', 'rooms', ['is_public'], unique=False)
    op.create_index(op.f('ix_rooms_owner_id'), 'rooms', ['owner_id'], unique=False)
    op.create_index(op.f('ix_rooms_public_id'), 'rooms', ['public_id'], unique=True)
    op.create_index('uq_rooms_owner_one_guest_active', 'rooms', ['owner_id'], unique=True, postgresql_where=sa.text("kind = 'guest'"))
    op.create_table('boards',
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_boards_deleted_at'), 'boards', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_boards_deleted_by_id'), 'boards', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_boards_public_id'), 'boards', ['public_id'], unique=True)
    op.create_index(op.f('ix_boards_room_id'), 'boards', ['room_id'], unique=False)
    op.create_index('uq_boards_room_id_active', 'boards', ['room_id'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('invitations',
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True),
    sa.Column('code_hash', sa.String(length=128), nullable=False),
    sa.Column('redemption_max', sa.Integer(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('redemption_max >= 1', name='ck_invites_redemption_max'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_invitations_created_by_id'), 'invitations', ['created_by_id'], unique=False)
    op.create_index(op.f('ix_invitations_deleted_at'), 'invitations', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_invitations_deleted_by_id'), 'invitations', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_invitations_room_id'), 'invitations', ['room_id'], unique=False)
    op.create_index('ix_invites_expires_at', 'invitations', ['expires_at'], unique=False)
    op.create_index('ix_invites_room_codehash', 'invitations', ['room_id', 'code_hash'], unique=False)
    op.create_index('uq_invites_room_code_hash_active', 'invitations', ['room_id', 'code_hash'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('room_members',
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', postgresql.ENUM('owner', 'admin', 'member', 'viewer', name='room_role'), server_default=sa.text("'member'"), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('room_id', 'user_id'),
    sa.UniqueConstraint('room_id', 'user_id', name='uq_room_members_unique')
    )
    op.create_index('ix_room_members_room_id', 'room_members', ['room_id'], unique=False)
    op.create_index('ix_room_members_user_id', 'room_members', ['user_id'], unique=False)
    op.create_table('board_columns',
    sa.Column('board_id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=128), nullable=False),
    sa.Column('position', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('wip_limit', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('parent_id IS NULL OR parent_id <> id', name='ck_columns_no_self_parent'),
    sa.CheckConstraint('position >= 0', name='ck_columns_position_nonneg'),
    sa.CheckConstraint('wip_limit IS NULL OR wip_limit >= 0', name='ck_columns_wip_nonneg'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id', 'board_id'], ['board_columns.id', 'board_columns.board_id'], name='fk_columns_parent_same_board', ondelete='SET NULL', use_alter=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', 'board_id', name='uq_columns_id_board')
    )
    op.create_index(op.f('ix_board_columns_board_id'), 'board_columns', ['board_id'], unique=False)
    op.create_index(op.f('ix_board_columns_deleted_at'), 'board_columns', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_board_columns_deleted_by_id'), 'board_columns', ['deleted_by_id'], unique=False)
    op.create_index('ix_columns_board_active', 'board_columns', ['board_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('ix_columns_board_parent_position', 'board_columns', ['board_id', 'parent_id', 'position'], unique=False)
    op.create_index('uq_columns_board_parent_position_active', 'board_columns', ['board_id', 'parent_id', 'position'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('invite_redemptions',
    sa.Column('invite_id', sa.Integer(), nullable=False),
    sa.Column('redeemed_by_id', sa.Integer(), nullable=False),
    sa.Column('redeemed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['invite_id'], ['invitations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['redeemed_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('invite_id', 'redeemed_by_id', name='uq_redemptions_invite_user')
    )
    op.create_index(op.f('ix_invite_redemptions_invite_id'), 'invite_redemptions', ['invite_id'], unique=False)
    op.create_index(op.f('ix_invite_redemptions_redeemed_by_id'), 'invite_redemptions', ['redeemed_by_id'], unique=False)
    op.create_index('ix_redemptions_invite', 'invite_redemptions', ['invite_id'], unique=False)
    op.create_table('swim_lanes',
    sa.Column('board_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=128), nullable=False),
    sa.Column('position', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('lane_type', postgresql.ENUM('standard', 'expedite', 'fixed_date', 'intangible', 'maintenance', 'defect', 'research', 'vip', name='lane_type'), server_default=sa.text("'standard'"), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('position >= 0', name='ck_lanes_position_nonneg'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', 'board_id', name='uq_lanes_id_board')
    )
    op.create_index('ix_lanes_board_active', 'swim_lanes', ['board_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index(op.f('ix_swim_lanes_board_id'), 'swim_lanes', ['board_id'], unique=False)
    op.create_index(op.f('ix_swim_lanes_deleted_at'), 'swim_lanes', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_swim_lanes_deleted_by_id'), 'swim_lanes', ['deleted_by_id'], unique=False)
    op.create_index('uq_lanes_board_position_active', 'swim_lanes', ['board_id', 'position'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('cards',
    sa.Column('board_id', sa.Integer(), nullable=False),
    sa.Column('column_id', sa.Integer(), nullable=False),
    sa.Column('lane_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('position', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('position >= 0', name='ck_cards_position_nonneg'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['column_id', 'board_id'], ['board_columns.id', 'board_columns.board_id'], name='fk_cards_column_same_board', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lane_id', 'board_id'], ['swim_lanes.id', 'swim_lanes.board_id'], name='fk_cards_lane_same_board', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_cards_board_active', 'cards', ['board_id'], unique=False, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_index('ix_cards_board_column_lane', 'cards', ['board_id', 'column_id', 'lane_id'], unique=False)
    op.create_index('ix_cards_board_column_position', 'cards', ['board_id', 'column_id', 'position'], unique=False)
    op.create_index(op.f('ix_cards_board_id'), 'cards', ['board_id'], unique=False)
    op.create_index(op.f('ix_cards_deleted_at'), 'cards', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_cards_deleted_by_id'), 'cards', ['deleted_by_id'], unique=False)
    op.create_index('uq_cards_column_position_active', 'cards', ['column_id', 'position'], unique=True, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('card_assignments',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('card_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'card_id')
    )
    op.create_index('ix_card_assignments_card', 'card_assignments', ['card_id'], unique=False)
    op.create_index(op.f('ix_card_assignments_card_id'), 'card_assignments', ['card_id'], unique=False)
    op.create_table('card_attachments',
    sa.Column('card_id', sa.Integer(), nullable=False),
    sa.Column('kind', postgresql.ENUM('twee', 'file', 'link', name='attachment_kind'), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('path', sa.Text(), nullable=True),
    sa.Column('twee', sa.Text(), nullable=True),
    sa.Column('content_type', sa.String(length=255), nullable=True),
    sa.Column('size_bytes', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_card_attachments_card_id'), 'card_attachments', ['card_id'], unique=False)
    op.create_index('ix_card_attachments_card_kind', 'card_attachments', ['card_id', 'kind'], unique=False)
    op.create_index(op.f('ix_card_attachments_deleted_at'), 'card_attachments', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_card_attachments_deleted_by_id'), 'card_attachments', ['deleted_by_id'], unique=False)
    op.create_table('comments',
    sa.Column('card_id', sa.Integer(), nullable=False),
    sa.Column('author_id', sa.Integer(), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('root_id', sa.Integer(), nullable=True),
    sa.Column('body', sa.Text(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('(parent_id IS NULL AND root_id = id) OR (parent_id IS NOT NULL AND root_id IS NOT NULL)', name='ck_comments_root_invariant'),
    sa.CheckConstraint('parent_id IS NULL OR parent_id <> id', name='ck_comments_no_self_parent'),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_id', 'card_id'], ['comments.id', 'comments.card_id'], name='fk_comments_parent_same_card', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['root_id', 'card_id'], ['comments.id', 'comments.card_id'], name='fk_comments_root_same_card', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', 'card_id', name='uq_comments_id_card')
    )
    op.create_index(op.f('ix_comments_author_id'), 'comments', ['author_id'], unique=False)
    op.create_index('ix_comments_card_created_desc', 'comments', ['card_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('ix_comments_card_id'), 'comments', ['card_id'], unique=False)
    op.create_index('ix_comments_card_root_parent_created', 'comments', ['card_id', 'root_id', 'parent_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_comments_deleted_at'), 'comments', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_comments_deleted_by_id'), 'comments', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_comments_parent_id'), 'comments', ['parent_id'], unique=False)
    op.create_index(op.f('ix_comments_root_id'), 'comments', ['root_id'], unique=False)
    op.create_index('ix_comments_updated_at', 'comments', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_comments_updated_at', table_name='comments')
    op.drop_index(op.f('ix_comments_root_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_parent_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_deleted_by_id'), table_name='comments')
    op.drop_index(op.f('ix_comments_deleted_at'), table_name='comments')
    op.drop_index('ix_comments_card_root_parent_created', table_name='comments')
    op.drop_index(op.f('ix_comments_card_id'), table_name='comments')
    op.drop_index('ix_comments_card_created_desc', table_name='comments')
    op.drop_index(op.f('ix_comments_author_id'), table_name='comments')
    op.drop_table('comments')
    op.drop_index(op.f('ix_card_attachments_deleted_by_id'), table_name='card_attachments')
    op.drop_index(op.f('ix_card_attachments_deleted_at'), table_name='card_attachments')
    op.drop_index('ix_card_attachments_card_kind', table_name='card_attachments')
    op.drop_index(op.f('ix_card_attachments_card_id'), table_name='card_attachments')
    op.drop_table('card_attachments')
    op.drop_index(op.f('ix_card_assignments_card_id'), table_name='card_assignments')
    op.drop_index('ix_card_assignments_card', table_name='card_assignments')
    op.drop_table('card_assignments')
    op.drop_index('uq_cards_column_position_active', table_name='cards', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index(op.f('ix_cards_deleted_by_id'), table_name='cards')
    op.drop_index(op.f('ix_cards_deleted_at'), table_name='cards')
    op.drop_index(op.f('ix_cards_board_id'), table_name='cards')
    op.drop_index('ix_cards_board_column_position', table_name='cards')
    op.drop_index('ix_cards_board_column_lane', table_name='cards')
    op.drop_index('ix_cards_board_active', table_name='cards', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('cards')
    op.drop_index('uq_lanes_board_position_active', table_name='swim_lanes', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index(op.f('ix_swim_lanes_deleted_by_id'), table_name='swim_lanes')
    op.drop_index(op.f('ix_swim_lanes_deleted_at'), table_name='swim_lanes')
    op.drop_index(op.f('ix_swim_lanes_board_id'), table_name='swim_lanes')
    op.drop_index('ix_lanes_board_active', table_name='swim_lanes', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('swim_lanes')
    op.drop_index('ix_redemptions_invite', table_name='invite_redemptions')
    op.drop_index(op.f('ix_invite_redemptions_redeemed_by_id'), table_name='invite_redemptions')
    op.drop_index(op.f('ix_invite_redemptions_invite_id'), table_name='invite_redemptions')
    op.drop_table('invite_redemptions')
    op.drop_index('uq_columns_board_parent_position_active', table_name='board_columns', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('ix_columns_board_parent_position', table_name='board_columns')
    op.drop_index('ix_columns_board_active', table_name='board_columns', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index(op.f('ix_board_columns_deleted_by_id'), table_name='board_columns')
    op.drop_index(op.f('ix_board_columns_deleted_at'), table_name='board_columns')
    op.drop_index(op.f('ix_board_columns_board_id'), table_name='board_columns')
    op.drop_table('board_columns')
    op.drop_index('ix_room_members_user_id', table_name='room_members')
    op.drop_index('ix_room_members_room_id', table_name='room_members')
    op.drop_table('room_members')
    op.drop_index('uq_invites_room_code_hash_active', table_name='invitations', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index('ix_invites_room_codehash', table_name='invitations')
    op.drop_index('ix_invites_expires_at', table_name='invitations')
    op.drop_index(op.f('ix_invitations_room_id'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_deleted_by_id'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_deleted_at'), table_name='invitations')
    op.drop_index(op.f('ix_invitations_created_by_id'), table_name='invitations')
    op.drop_table('invitations')
    op.drop_index('uq_boards_room_id_active', table_name='boards', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_index(op.f('ix_boards_room_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_public_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_deleted_by_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_deleted_at'), table_name='boards')
    op.drop_table('boards')
    op.drop_index('uq_rooms_owner_one_guest_active', table_name='rooms', postgresql_where=sa.text("kind = 'guest'"))
    op.drop_index(op.f('ix_rooms_public_id'), table_name='rooms')
    op.drop_index(op.f('ix_rooms_owner_id'), table_name='rooms')
    op.drop_index('ix_rooms_is_public', table_name='rooms')
    op.drop_index('ix_rooms_expiring_active', table_name='rooms', postgresql_where=sa.text("kind = 'guest'"))
    op.drop_index(op.f('ix_rooms_expires_at'), table_name='rooms')
    op.drop_table('rooms')
    op.drop_index(op.f('ix_identities_user_id'), table_name='identities')
    op.drop_table('identities')
    op.drop_index('uq_users_name_lower', table_name='users', postgresql_where=sa.text('name IS NOT NULL'))
    op.drop_index('uq_users_email_lower', table_name='users', postgresql_where=sa.text('email IS NOT NULL'))
    op.drop_index(op.f('ix_users_public_id'), table_name='users')
    op.drop_index(op.f('ix_users_is_guest'), table_name='users')
    op.drop_index('ix_users_expiring_guests_active', table_name='users', postgresql_where=sa.text('is_guest = true'))
    op.drop_index(op.f('ix_users_expires_at'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
