"""initialize database

Revision ID: b9df84ad9bda
Revises: 
Create Date: 2025-10-20 23:40:38.866559

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b9df84ad9bda'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('display_name', sa.String(length=128), nullable=True),
    sa.Column('email', postgresql.CITEXT(), nullable=True),
    sa.Column('terms_accepted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_guest', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('(is_guest = false) OR (expires_at IS NOT NULL)', name='ck_users_guest_requires_expires_at'),
    sa.CheckConstraint('length(email) <= 320', name='ck_users_email_length'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('display_name'),
    sa.UniqueConstraint('public_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_expires_at'), 'users', ['expires_at'], unique=False)
    op.create_index('ix_users_expiring_guests_active', 'users', ['expires_at'], unique=False, postgresql_where=sa.text('is_guest = true'))
    op.create_index(op.f('ix_users_is_guest'), 'users', ['is_guest'], unique=False)
    op.create_index('uq_users_email_lower', 'users', [sa.literal_column('lower(email)')], unique=True, postgresql_where=sa.text('email IS NOT NULL'))
    op.create_index('uq_users_name_lower', 'users', [sa.literal_column('lower(name)')], unique=False, postgresql_where=sa.text('name IS NOT NULL'))
    op.create_table('identities',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('provider', sa.String(length=50), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('provider', 'subject', name='uq_identities_provider_subject')
    )
    op.create_index(op.f('ix_identities_user_id'), 'identities', ['user_id'], unique=False)
    op.create_table('rooms',
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('room_type', sa.Enum('NORMAL', 'GUEST', name='room_type', create_constraint=True), server_default='NORMAL', nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(room_type <> 'GUEST') OR (expires_at IS NOT NULL)", name='ck_rooms_guest_requires_expires_at'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_id', 'name', name='uq_rooms_owner_name'),
    sa.UniqueConstraint('public_id')
    )
    op.create_index(op.f('ix_rooms_expires_at'), 'rooms', ['expires_at'], unique=False)
    op.create_index('ix_rooms_expiring_active', 'rooms', ['expires_at'], unique=False, postgresql_where=sa.text("room_type = 'GUEST'"))
    op.create_index(op.f('ix_rooms_owner_id'), 'rooms', ['owner_id'], unique=False)
    op.create_index('uq_rooms_owner_one_guest_active', 'rooms', ['owner_id'], unique=True, postgresql_where=sa.text("room_type = 'GUEST'"))
    op.create_table('boards',
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('public_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('public_id')
    )
    op.create_index(op.f('ix_boards_deleted_at'), 'boards', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_boards_deleted_by_id'), 'boards', ['deleted_by_id'], unique=False)
    op.create_index(op.f('ix_boards_room_id'), 'boards', ['room_id'], unique=False)
    op.create_table('room_members',
    sa.Column('room_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='role_type', create_constraint=True), server_default='MEMBER', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['room_id'], ['rooms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('room_id', 'user_id'),
    sa.UniqueConstraint('room_id', 'user_id', name='uq_room_members_unique')
    )
    op.create_index('ix_room_members_room_id', 'room_members', ['room_id'], unique=False)
    op.create_index('ix_room_members_user_id', 'room_members', ['user_id'], unique=False)
    op.create_table('board_columns',
    sa.Column('board_id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=128), nullable=False),
    sa.Column('position', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('wip_limit', sa.Integer(), nullable=True),
    sa.Column('column_type', sa.String(length=128), server_default=sa.text("'standard'"), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_by_id', sa.Integer(), nullable=True),
    sa.CheckConstraint('parent_id IS NULL OR parent_id <> id', name='ck_columns_no_self_parent'),
    sa.CheckConstraint('position >= 0', name='ck_columns_position_nonneg'),
    sa.CheckConstraint('wip_limit IS NULL OR wip_limit >= 0', name='ck_columns_wip_nonneg'),
    sa.ForeignKeyConstraint(['board_id'], ['boards.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id', 'board_id', name='uq_columns_id_board')
    )
    op.create_index(op.f('ix_board_columns_board_id'), 'board_columns', ['board_id'], unique=False)
    op.create_index(op.f('ix_board_columns_deleted_at'), 'board_columns', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_board_columns_deleted_by_id'), 'board_columns', ['deleted_by_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_board_columns_deleted_by_id'), table_name='board_columns')
    op.drop_index(op.f('ix_board_columns_deleted_at'), table_name='board_columns')
    op.drop_index(op.f('ix_board_columns_board_id'), table_name='board_columns')
    op.drop_table('board_columns')
    op.drop_index('ix_room_members_user_id', table_name='room_members')
    op.drop_index('ix_room_members_room_id', table_name='room_members')
    op.drop_table('room_members')
    op.drop_index(op.f('ix_boards_room_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_deleted_by_id'), table_name='boards')
    op.drop_index(op.f('ix_boards_deleted_at'), table_name='boards')
    op.drop_table('boards')
    op.drop_index('uq_rooms_owner_one_guest_active', table_name='rooms', postgresql_where=sa.text("room_type = 'GUEST'"))
    op.drop_index(op.f('ix_rooms_owner_id'), table_name='rooms')
    op.drop_index('ix_rooms_expiring_active', table_name='rooms', postgresql_where=sa.text("room_type = 'GUEST'"))
    op.drop_index(op.f('ix_rooms_expires_at'), table_name='rooms')
    op.drop_table('rooms')
    op.drop_index(op.f('ix_identities_user_id'), table_name='identities')
    op.drop_table('identities')
    op.drop_index('uq_users_name_lower', table_name='users', postgresql_where=sa.text('name IS NOT NULL'))
    op.drop_index('uq_users_email_lower', table_name='users', postgresql_where=sa.text('email IS NOT NULL'))
    op.drop_index(op.f('ix_users_is_guest'), table_name='users')
    op.drop_index('ix_users_expiring_guests_active', table_name='users', postgresql_where=sa.text('is_guest = true'))
    op.drop_index(op.f('ix_users_expires_at'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
